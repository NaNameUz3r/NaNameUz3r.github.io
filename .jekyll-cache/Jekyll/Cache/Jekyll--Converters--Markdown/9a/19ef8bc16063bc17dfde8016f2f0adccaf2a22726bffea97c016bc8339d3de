I"l#<p>Идея написать этот пост возникла у меня после того, как я вспомнил случай, когда один <strong>опытный</strong> DBA на полном 
серьезе у меня спросил — <em>“А что такое гит?”</em> 
<!--more--></p>

<p>В это может быть сложно поверить, но разговор из подзаголовка я действительно пережил. Не смотря на то что парень давно работает админом баз данных он имел крайне смутное представление о гите, вроде <em>“ну я понимаю что там есть гитхаб и вот это всё, код там лежит, а что это, как и зачем — не знаю”</em>.</p>

<hr />

<p>Git — это программная система, которая управляет версиями файлов. Всё.
Инструмент был разработан Линусом Торвальдсом, кто не в курсе (есть такие?), это умный фин, что разработал ядро Linux. После того как Линус релизнул ядро в open source очень быстро и очень много людей подключились к разработке и доработке ядра. То есть <em>много людей захотели одновременно работать с одной и той же кодовой базой, с одним проектом</em>. В таких условиях было чрезвычайно сложно отслеживать изменения, проверять каждую правку кода на предмет ошибок, нужно было в отдельных местах хранить стабильные версии, и много других проблем.</p>

<p>Все эти проблемы решает Git.</p>

<p>Исходный код любой программы ничто иное, как просто текстовые файлы. Git ведет своего рода “базу данных” этих файлов, каждое их изменение, при том с возможностью откатывать эти изменения назад, и… если надо — вперёд! Back in the future, Марти, мы ничего не протеряли (если правильно и со знанием дела польовались git’ом.)</p>

<p>И самая главная мысль в том, что это могут быть <em>не обязательно</em> текстовые файлы, а любые файлы вообще.</p>

<h3 id="как-это-работает">Как это работает?</h3>

<p>Вам нужно установить git, инициализировать <em>репозиторий</em> и начать работать. Это может быть консольная утилита, или графический редактор с поддержкой гита, или какой-то специальный софт с графическим интерфейсом, которого уже наразрабатывали достаточно. Git на самом деле сложная штука, её придумал умный человек для умных людей, но для базового использования большей части преимуществ лезть глубоко в дебри не обязательно.</p>

<p>Верхнеуровнево гит работает примерно так.
У вас есть некоторое пространство для хранения файлов. Директория, или, если хотите — папка. В ней вы иницилизируете git репозиторий, говоря гиту <em>отслеживать все изменения</em> файлов в этой директории, и каких именно файлов. Гит будет следить за любыми изменениями и удалениями файлов. Вы можете исключить какие-то файлы из отслеживания, создать новые, etc. В нужный вам момент вы можете <em>зафиксировать</em> изменения, это называется commit. Вы можете создать новую <em>ветку</em>, скопировав существующую (все происходит в рамках того же рпозитория!), наизменять в ней что угодно, вернуться к предыдущей ветке, на состояние момента времени, последние из которых вы зафиксировали. Ветки можно сливать, перезаписывая все изменения из одной ветки поверх другой.</p>

<p>Репозитории могут быть локальными, могут быть удаленными (origin) и храниться на вашем личном сервере git или в таких сервисах как github или gitlab. Репозитории с серверов вы можете клонировать себе локально на любой девайс где установлен git с помощью одноименной команды git clone.</p>

<p>Важно то, что все файлы и ветки хранятся в одной директории. Если вы переключаетесь между ветками, гит автоматически скрывает от вас одни файлы, и показывает другие, из ветки на которую вы переключились в данный момент.</p>

<p>В сети огромное количество гайдов по гиту всех уровней, from zero to hero, что называется.</p>

<h3 id="как-я-могу-это-использовать">Как я могу это использовать?</h3>

<p>Не смотря на то, что гит в первую очередь служит для версионного контроля программного кода в качестве инструмента для удобства совместной разработки множеством людей, гит может быть полезным не только для программистов. Как я сказал в самом начале — гит следит за изменениями любых файлов, а значит потенциальная сфера его применения ограничена лишь вашими требованиями и фантазией.</p>

<p>Например вы пишете книгу или дипломную работу. Или вы писатель, копирайтер. Вы можете организовать свою работу в гите, если есть необходимость, постоянная или потенциальная, возвращаться к старым версиям своих документов. Например вы можете разбить свою работу по главам, каждая глава будет отдельным текстовым файлом, которые вы постепенно будете дорабатывать, продумывать, все изменения будут сохранены в гите и вы всегда сможете к ним вернуться, через день или через год.</p>

<p>Или вы дизайнер, или диджитал художник. Или 3D моделированием занимаетесь. Можно сохранять прогрессы в своей работе делая коммиты, создавать новые версии одной картины или макета, переключаться между ними, etc. Думаю вы уловили мысль.</p>

<p>Свой сервер или приватный github\gitlab репозиторий (или много репозиториев) может служить вам беспланым облачным хранилищем, через которое вы можете синхронизировать состояния своих проектов на разных устройствах. В конце концов вы можете подключить к работе других писателей, художников, что бы вы там вместе не делали, и спользовать гит на полую катушку так, как он был (и для чего был) задуман.</p>
:ET